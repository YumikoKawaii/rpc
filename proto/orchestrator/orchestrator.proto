syntax = "proto3";

package orchestrator.api;

import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "yumiko_kawaii.com/yine/applications/orchestrator/api;api";

// Orchestrator ...
service Orchestrator {

  // SendMessage - Client sends a message (unary RPC)
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {
    option (google.api.http) = {
      post: "/api/v1/messages"
      body: "*"
    };
  }

  // ReceiveMessages - Client receives real-time messages (server streaming)
  rpc ReceiveMessages(ReceiveMessagesRequest) returns (stream Message);
}

// SendMessage request
message SendMessageRequest {
  string from_user_id = 1 [(validate.rules).string.min_len = 1];
  string to_user_id = 2 [(validate.rules).string.min_len = 1];
  string content = 3 [(validate.rules).string.min_len = 1];
  MessageType type = 4;
//  string conversation_id = 5; // optional, for group chats
}

message SendMessageResponse {
  int32 code = 1;
  string message = 2;
  MessageData data = 3;
}

message MessageData {
  string message_id = 1;
  int64 timestamp = 2;
  MessageStatus status = 3;
}

// ReceiveMessages request
message ReceiveMessagesRequest {
  string user_id = 1 [(validate.rules).string.min_len = 1];
  string session_token = 2; // for authentication
}

// Message - streamed to client
message Message {
  string message_id = 1;
  string from_user_id = 2;
  string to_user_id = 3;
  string content = 4;
  MessageType type = 5;
  int64 timestamp = 6;
  MessageStatus status = 7;
  string conversation_id = 8; // optional, for group chats
}

// Enums
enum MessageType {
  TEXT = 0;
  IMAGE = 1;
  VIDEO = 2;
  AUDIO = 3;
  FILE = 4;
  LOCATION = 5;
}

enum MessageStatus {
  SENT = 0;
  DELIVERED = 1;
  READ = 2;
  FAILED = 3;
}