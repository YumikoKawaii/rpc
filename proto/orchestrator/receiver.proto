syntax = "proto3";

package orchestrator;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "proto/orchestrator/prototypes.proto";

option go_package = "orchestrator/receiver/api;api";

// Receiver ...
service Receiver {
  // SendMessage - Client sends a message (unary RPC)
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {
    option (google.api.http) = {
      post: "/api/v1/messages"
      body: "*"
    };
  }
}

// SendMessage request
message SendMessageRequest {
  string from_user_id = 1 [(validate.rules).string.min_len = 1];
  string to_user_id = 2 [(validate.rules).string.min_len = 1];
  string content = 3 [(validate.rules).string.min_len = 1];
  MessageType type = 4;
  string conversation_id = 5; // optional, for group chats
}

message SendMessageResponse {
  int32 code = 1;
  string message = 2;
  MessageData data = 3;
}

message MessageData {
  string message_id = 1;
  int64 timestamp = 2;
  MessageStatus status = 3;
}