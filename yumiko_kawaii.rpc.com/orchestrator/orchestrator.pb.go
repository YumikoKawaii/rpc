// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: orchestrator/orchestrator.proto

package api

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EntryRequest struct {
	CurrentSession       string   `protobuf:"bytes,1,opt,name=current_session,json=currentSession,proto3" json:"current_session,omitempty"`
	PreviousSession      string   `protobuf:"bytes,2,opt,name=previous_session,json=previousSession,proto3" json:"previous_session,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntryRequest) Reset()         { *m = EntryRequest{} }
func (m *EntryRequest) String() string { return proto.CompactTextString(m) }
func (*EntryRequest) ProtoMessage()    {}
func (*EntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_10333fde484e6690, []int{0}
}
func (m *EntryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryRequest.Merge(m, src)
}
func (m *EntryRequest) XXX_Size() int {
	return m.Size()
}
func (m *EntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EntryRequest proto.InternalMessageInfo

func (m *EntryRequest) GetCurrentSession() string {
	if m != nil {
		return m.CurrentSession
	}
	return ""
}

func (m *EntryRequest) GetPreviousSession() string {
	if m != nil {
		return m.PreviousSession
	}
	return ""
}

type EntryResponse struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntryResponse) Reset()         { *m = EntryResponse{} }
func (m *EntryResponse) String() string { return proto.CompactTextString(m) }
func (*EntryResponse) ProtoMessage()    {}
func (*EntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10333fde484e6690, []int{1}
}
func (m *EntryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryResponse.Merge(m, src)
}
func (m *EntryResponse) XXX_Size() int {
	return m.Size()
}
func (m *EntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EntryResponse proto.InternalMessageInfo

func (m *EntryResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *EntryResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*EntryRequest)(nil), "orchestrator.api.EntryRequest")
	proto.RegisterType((*EntryResponse)(nil), "orchestrator.api.EntryResponse")
}

func init() { proto.RegisterFile("orchestrator/orchestrator.proto", fileDescriptor_10333fde484e6690) }

var fileDescriptor_10333fde484e6690 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xbf, 0x4a, 0x03, 0x41,
	0x10, 0xc6, 0xdd, 0x60, 0x14, 0x97, 0xc4, 0x84, 0x6d, 0x0c, 0x41, 0x2e, 0x72, 0x8d, 0x7f, 0x8a,
	0x5b, 0xd4, 0x46, 0x14, 0x1b, 0xc1, 0xc6, 0x46, 0x88, 0x9d, 0x4d, 0xd8, 0x5c, 0x86, 0x38, 0x24,
	0xd9, 0x59, 0x77, 0xf7, 0x22, 0x69, 0x7d, 0x05, 0x1b, 0x1f, 0xc9, 0x52, 0xf0, 0x05, 0x24, 0xfa,
	0x20, 0x92, 0xbd, 0x8b, 0x5c, 0x04, 0xbb, 0x99, 0x6f, 0x3e, 0xbe, 0xdd, 0xf9, 0x0d, 0xef, 0x90,
	0x4d, 0x1f, 0xc0, 0x79, 0xab, 0x3c, 0x59, 0x59, 0x6e, 0x12, 0x63, 0xc9, 0x93, 0x68, 0xae, 0x68,
	0xca, 0x60, 0x7b, 0x77, 0x48, 0x34, 0x1c, 0x83, 0x54, 0x06, 0xa5, 0xd2, 0x9a, 0xbc, 0xf2, 0x48,
	0xda, 0xe5, 0xfe, 0xf6, 0xce, 0x54, 0x8d, 0x71, 0xa0, 0x3c, 0xc8, 0x65, 0x91, 0x0f, 0xe2, 0x3e,
	0xaf, 0x5d, 0x6b, 0x6f, 0x67, 0x5d, 0x78, 0xcc, 0xc0, 0x79, 0xb1, 0xcf, 0x1b, 0x69, 0x66, 0x2d,
	0x68, 0xdf, 0x73, 0xe0, 0x1c, 0x92, 0x6e, 0xb1, 0x3d, 0x76, 0xb0, 0xd5, 0xdd, 0x2e, 0xe4, 0xbb,
	0x5c, 0x15, 0x87, 0xbc, 0x69, 0x2c, 0x4c, 0x91, 0x32, 0xf7, 0xeb, 0xac, 0x04, 0x67, 0x63, 0xa9,
	0x17, 0xd6, 0xf8, 0x92, 0xd7, 0x8b, 0x37, 0x9c, 0x21, 0xed, 0x40, 0x08, 0xbe, 0x9e, 0xd2, 0x00,
	0x42, 0x72, 0xb5, 0x1b, 0x6a, 0xd1, 0xe2, 0x9b, 0x13, 0x70, 0x4e, 0x0d, 0xa1, 0x88, 0x59, 0xb6,
	0x27, 0x96, 0xd7, 0x6e, 0x4b, 0xdb, 0x8a, 0x3e, 0xaf, 0x86, 0x38, 0x11, 0x25, 0x7f, 0x29, 0x24,
	0xe5, 0x5d, 0xda, 0x9d, 0x7f, 0xe7, 0xf9, 0x3f, 0xe2, 0xd6, 0xf3, 0xc7, 0xf7, 0x4b, 0x45, 0x9c,
	0xb3, 0xa3, 0xb8, 0x1e, 0xc0, 0x4d, 0x8f, 0x25, 0x2c, 0x1c, 0x57, 0x37, 0x6f, 0xf3, 0x88, 0xbd,
	0xcf, 0x23, 0xf6, 0x39, 0x8f, 0xd8, 0xeb, 0x57, 0xb4, 0x76, 0x7f, 0x36, 0xcb, 0x26, 0x38, 0xa2,
	0xde, 0x48, 0x3d, 0x29, 0xc4, 0x24, 0xa5, 0x89, 0x9c, 0xa1, 0x5e, 0xf0, 0x36, 0x63, 0x4c, 0x73,
	0xd8, 0x2b, 0x97, 0x5a, 0x04, 0x5e, 0x28, 0x83, 0xfd, 0x8d, 0x40, 0xfa, 0xf4, 0x27, 0x00, 0x00,
	0xff, 0xff, 0xd5, 0x2e, 0x87, 0x5e, 0xd5, 0x01, 0x00, 0x00,
}

func (m *EntryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PreviousSession) > 0 {
		i -= len(m.PreviousSession)
		copy(dAtA[i:], m.PreviousSession)
		i = encodeVarintOrchestrator(dAtA, i, uint64(len(m.PreviousSession)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CurrentSession) > 0 {
		i -= len(m.CurrentSession)
		copy(dAtA[i:], m.CurrentSession)
		i = encodeVarintOrchestrator(dAtA, i, uint64(len(m.CurrentSession)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintOrchestrator(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintOrchestrator(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrchestrator(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrchestrator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EntryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CurrentSession)
	if l > 0 {
		n += 1 + l + sovOrchestrator(uint64(l))
	}
	l = len(m.PreviousSession)
	if l > 0 {
		n += 1 + l + sovOrchestrator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOrchestrator(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovOrchestrator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOrchestrator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrchestrator(x uint64) (n int) {
	return sovOrchestrator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EntryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrchestrator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSession", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrchestrator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrchestrator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrchestrator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentSession = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousSession", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrchestrator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrchestrator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrchestrator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousSession = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrchestrator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrchestrator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrchestrator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrchestrator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrchestrator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrchestrator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrchestrator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrchestrator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrchestrator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrchestrator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrchestrator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrchestrator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrchestrator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrchestrator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrchestrator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrchestrator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrchestrator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrchestrator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrchestrator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrchestrator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrchestrator = fmt.Errorf("proto: unexpected end of group")
)
